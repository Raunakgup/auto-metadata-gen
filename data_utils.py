import os  
from datetime import datetime  # for parsing and formatting dates
from typing import Dict  # for type hinting the metadata dictionaries

from docx import Document  # to read DOCX document content
from docx import Document as DocxDocument  # alias for metadata extraction to avoid confusion
from PyPDF2 import PdfReader  # to extract text and metadata from PDF files
from PyPDF2 import PdfReader as PDFReader  
from pdf2image import convert_from_path  # to convert PDF pages to images for OCR fallback
import pytesseract  # to perform OCR on images when PDF text extraction fails


def extract_text_from_txt(path: str) -> str:
    """Read the entire content of a plain-text (.txt) file.

    Parameters:
        path: str - filepath to the .txt document
    Returns:
        str: full text content of the file
    """
    # Open in text mode with UTF-8, ignoring any decode errors
    with open(path, 'r', encoding='utf-8', errors='ignore') as f:
        return f.read()


def extract_text_from_docx(path: str) -> str:
    """Extract and concatenate text from all paragraphs in a .docx document.

    Parameters:
        path: str - filepath to the DOCX file
    Returns:
        str: newline-separated paragraph texts
    """
    doc = Document(path)  
    # Join each paragraph's text with newline separators to preserve simple structure
    return "\n".join(para.text for para in doc.paragraphs)


def extract_text_from_pdf(path: str) -> str:
    """
    Extract text from a PDF, with a fallback to OCR if needed.

    Steps:
    1. Use PyPDF2 to extract text from each page.
    2. If the combined text is very short (<100 chars), assume scanned PDF
       and perform OCR via pytesseract on images generated by pdf2image.

    Parameters:
        path: str - filepath to the PDF document
    Returns:
        str: extracted or OCR-generated text
    """
    # Initialize PDF reader 
    reader = PdfReader(path)
    text_pages = [page.extract_text() or "" for page in reader.pages]
    joined = "\n".join(text_pages).strip()

    # If less than threshold, perform OCR on each rendered page
    if len(joined) < 100:
        ocr_pages = []
        # Convert PDF pages to PIL images at 300 DPI for better OCR accuracy
        images = convert_from_path(path, dpi=300)
        for img in images:
            # Append OCR result for each page
            ocr_pages.append(pytesseract.image_to_string(img))
        joined = "\n".join(ocr_pages)
    return joined


def extract_text(path: str) -> str:
    """
    Dispatch text extraction based on file extension.

    Determines the correct extractor for .txt, .docx, and .pdf files.

    Parameters:
        path: str - filepath to the document
    Returns:
        str: extracted text

    Raises:
        ValueError: if file extension is unsupported
    """
    ext = os.path.splitext(path)[1].lower()
    if ext == ".txt":
        return extract_text_from_txt(path)
    elif ext == ".docx":
        return extract_text_from_docx(path)
    elif ext == ".pdf":
        return extract_text_from_pdf(path)
    else:
        # Signal unsupported formats early
        raise ValueError(f"Unsupported file type: {ext}")


def get_pdf_metadata(path: str) -> Dict[str, str]:
    """Extract built-in metadata (author, creation date) from a PDF file.

    Handles both attribute-based and dictionary-based metadata representations.

    Parameters:
        path: str - filepath to the PDF
    Returns:
        Dict[str, str]: keys 'author' and 'created_at' with ISO-formatted values
    """
    reader = PDFReader(path)  
    info = reader.metadata or {}

    # Determine author from either attribute or dict keys
    if hasattr(info, "author"):
        author = info.author or ""
    else:
        author = info.get("author") or info.get("/Author") or ""

    # Extract raw creation date, handling attribute or dict styles
    raw = None
    if hasattr(info, "creation_date"):
        raw = info.creation_date
    else:
        raw = info.get("creation_date") or info.get("/CreationDate")

    created_at = ""
    if raw:
        # If already a datetime, convert directly
        if isinstance(raw, datetime):
            created_at = raw.isoformat()
        else:
            # PDF date strings often start with 'D:', strip if present
            s = str(raw)
            if s.startswith("D:"):
                s = s[2:]
            # Parse standard PDF date format 'YYYYMMDDHHMMSS'
            try:
                created_at = datetime.strptime(s[:14], "%Y%m%d%H%M%S").isoformat()
            except Exception:
                # Fallback to raw string if parsing fails
                created_at = s
    return {"author": author, "created_at": created_at}


def get_docx_metadata(path: str) -> Dict[str, str]:
    """Extract built-in metadata (author, creation date) from a DOCX file.

    Leverages python-docx core properties for metadata.

    Parameters:
        path: str - filepath to the DOCX file
    Returns:
        Dict[str, str]: keys 'author' and 'created_at'
    """
    doc = DocxDocument(path)  # load document for metadata access
    props = doc.core_properties
    author = props.author or ""
    created_at = ""
    if props.created:
        if isinstance(props.created, datetime):
            created_at = props.created.isoformat()
        else:
            created_at = str(props.created)
    return {"author": author, "created_at": created_at}


def get_file_metadata(path: str) -> Dict[str, str]:
    """
    Dispatch embedded metadata extraction based on file extension.

    Returns a consistent dict for author and creation date.

    Parameters:
        path: str - filepath to the document
    Returns:
        Dict[str, str]: metadata dict with 'author' and 'created_at'
    """
    ext = os.path.splitext(path)[1].lower()
    if ext == ".pdf":
        return get_pdf_metadata(path)
    elif ext == ".docx":
        return get_docx_metadata(path)
    else:
        # Other formats have no embedded metadata
        return {"author": "", "created_at": ""}


if __name__ == "__main__":
    # Command-line interface for quick manual testing
    import sys
    if len(sys.argv) != 2:
        print("Usage: python data_utils.py <path_to_file>")
        sys.exit(1)

    p = sys.argv[1]
    print("== Text Preview ==")
    print(extract_text(p)[:500])  # show the first 500 characters
    print("\n== Embedded Metadata ==")
    print(get_file_metadata(p))  # print the author and creation date
